from copy import deepcopy

class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        board = [[False] * n for _ in range(n)]
        result = []
        for i in range(n):
            self.backtrack(0, i, deepcopy(board), [], result)
        return result
        
    def backtrack(self, x, y, board, config, result):
        if not self.can_move(x, y, board):
            return
        
        self.fill(x, y, board)
        queen_position = ''.join(['.' if i != y else 'Q' for i in range(len(board))])

        config.append(queen_position)
        if len(config) == len(board):
            result.append(config.copy())
            return
        for i in range(len(board)):
            self.backtrack(x + 1, i, deepcopy(board), config.copy(), result)
        
        
    def can_move(self, x, y, board) -> bool:
        if x >= len(board) or y >= len(board) or x < 0 or y < 0 or board[x][y] == True:
            return False
        return True
    
    def fill(self, x, y, board):
        for i in range(len(board)):
            board[x][i] = True
            board[i][y] = True

        temp_x = x
        temp_y = y
        while temp_x < len(board) and temp_y < len(board):
            board[temp_x][temp_y] = True
            temp_x += 1
            temp_y += 1
        
        temp_x = x
        temp_y = y
        while temp_y >= 0 and temp_x < len(board):
            board[temp_x][temp_y] = True
            temp_x += 1
            temp_y -= 1
