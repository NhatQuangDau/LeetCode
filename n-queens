# @dataclass
# class Move:
#     dx: int
#     dy: int

# moves = (
#     Move(1, 0),
#     Move(1, 1),
#     Move(0, 1),
#     Move(1, -1),
#     Move(-1, 0),
#     Move(-1, -1),
#     Move(0, -1),
#     Move(-1, 1)
# )

class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        board = [[False] * n for _ in range(n)]
        result = []
        for i in range(n):
            self.backtrack(0, i, board, [], result)
        return result
        
    def backtrack(self, x, y, board, config, result):
        if self.can_move(x, y, board):
            self.fill(x, y, board)
        else:
            return
        queen_position = ""
        for i in range(len(board)):
            if i == y:
                queen_position += "Q"
            else:
                queen_position += "."
        config.append(queen_position.copy())
        if x == len(board) - 1 or y == len(board) - 1:
            result.append(config.copy())
        for i in range(len(board)):
            self.backtrack(x + 1, i, board, config.copy(), result)
        
        
    def can_move(self, x, y, board) -> bool:
        if x >= len(board) or y >= len(board) or x < 0 or y < 0 or board[x][y] == True:
            return False
        return False
    
    def fill(self, x, y, board):
        for i in range(n):
            board[x][i] = True
            board[i][y] = True
        temp_x = x
        temp_y = y
        while temp_x != -1 and temp_y != -1 and temp_x != len(board) and temp_y != len(board):
            board[temp_x][temp_y] = True
            temp_x -= 1
            temp_y -= 1
        temp_x = x
        temp_y = y
        while temp_x != -1 and temp_y != -1 and temp_x != len(board) and temp_y != len(board):
            board[temp_x][temp_y] = True
            temp_x += 1
            temp_y += 1
        temp_x = x
        temp_y = y
        while temp_x != -1 and temp_y != -1 and temp_x != len(board) and temp_y != len(board):
            board[temp_x][temp_y] = True
            temp_x += 1
            temp_y -= 1
        temp_x = x
        temp_y = y
        while temp_x != -1 and temp_y != -1 and temp_x != len(board) and temp_y != len(board):
            board[temp_x][temp_y] = True
            temp_x -= 1
            temp_y += 1
